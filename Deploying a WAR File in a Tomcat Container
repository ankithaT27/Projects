Mastering Docker & Jenkins: Deploying a WAR File in a Tomcat Container

 Objective: Deploy a Java-based web application (LoginWebApp) in an Apache Tomcat container using Docker and automate the process using a Jenkins pipeline

---


Steps

Step 1: Launch an EC2 Instance

1. Launch an EC2 instance with the necessary configuration.



Step 2: Install Docker

Run the following commands:

yum install docker -y 
systemctl start docker

Step 3: Create a Dockerfile

Use the following content in the Dockerfile:

FROM ubuntu 
WORKDIR /mnt 
RUN apt-get update && apt-get install openjdk-11-jdk maven wget git unzip -y 
EXPOSE 8080 
RUN git clone https://lnkd.in/g7vbHxKg 
RUN wget https://lnkd.in/gzKUkVSs 
RUN unzip apache-tomcat-9.0.90.zip 
RUN chmod -R 777 apache-tomcat-9.0.90 
WORKDIR /mnt/project 
RUN mvn clean install 
RUN cp -r /mnt/project/target/LoginWebApp.war /mnt/apache-tomcat-9.0.90/webapps/ 
WORKDIR /mnt/apache-tomcat-9.0.90/bin 
RUN chmod -R 777 startup.sh 
RUN ./startup.sh

Step 4: Build and Run the Docker Image

docker build -t myassign:1.0 /root 
docker images 
docker run -itdp 8080:8080 --name test myassign:1.0 
docker ps -a

Step 5: Start Tomcat Server

Enter the container and start the Tomcat server:

docker exec -it test bash 
./startup.sh

Step 6: Access the Web Application

Open the following URL in your browser:
http://<EC2_PUBLIC_IP>:8080/LoginWebApp/


---

Creating a Pipeline Job in Jenkins

pipeline {
 agent any
 stages {
 stage("Git Clone") {
 steps {
 dir ("/mnt") {
 git "https://lnkd.in/g7vbHxKg"
 }
 }
 }
 stage("Build") {
 steps {
 dir ("/mnt/project/") {
 sh "mvn clean install"
 }
 }
 }
 stage("Deploy") {
 steps {
 sh "cp -r /mnt/project/target/LoginWebApp.war /mnt/apache-tomcat-9.0.90/webapps/"
 }
 }
 }
}


---

Outcome

A fully automated deployment of LoginWebApp in a Tomcat container is successfully achieved using Docker and Jenkins. The application is accessible at the configured URL.


---
